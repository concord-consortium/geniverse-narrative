function IDestructible() {}
IDestructible.prototype.constructor = IDestructible;
IDestructible.prototype.destroy = function() {};

function IEventDispatcher() {
    IDestructible.call(this);
    this.__IEventDispatcher_callbacks = []
}
IEventDispatcher.prototype = new IDestructible();
IEventDispatcher.prototype.constructor = IEventDispatcher;
IEventDispatcher.prototype.__IEventDispatcher_callbacks = [];
IEventDispatcher.prototype.addEventListener = function(c, b) {
    for (var a = 0; a < this.__IEventDispatcher_callbacks.length; a++) {
        var d = this.__IEventDispatcher_callbacks[a];
        if (d.type == c && d.handler == b && d.target == this) {
            return
        }
    }
    this.__IEventDispatcher_callbacks.push({
        type: c,
        handler: b,
        target: this
    })
};
IEventDispatcher.prototype.removeEventListener = function(c, b) {
    for (var a = this.__IEventDispatcher_callbacks.length - 1; a >= 0; a--) {
        var d = this.__IEventDispatcher_callbacks[a];
        if (d.type == c && d.handler == b && d.target == this) {
            this.__IEventDispatcher_callbacks.splice(a, 1)
        }
    }
};
IEventDispatcher.prototype.dispatchEvent = function(b) {
    b.target = this;
    for (var a = 0; a < this.__IEventDispatcher_callbacks.length; a++) {
        var c = this.__IEventDispatcher_callbacks[a];
        if (c.type == b.type && c.target == b.target) {
            c.handler.call(this, b)
        }
    }
};
IEventDispatcher.prototype.hasEventListener = function(b) {
    for (var a = 0; a < this.__IEventDispatcher_callbacks.length; a++) {
        var c = this.__IEventDispatcher_callbacks[a];
        if (c.type == b) {
            return true
        }
    }
    return false
};
IEventDispatcher.prototype.destroy = function() {
    for (var a = this.__IEventDispatcher_callbacks.length - 1; a >= 0; a--) {
        var b = this.__IEventDispatcher_callbacks[a];
        if (b.target == this) {
            delete b.type;
            delete b.handler;
            this.__IEventDispatcher_callbacks.splice(a, 1)
        }
    }
    IDestructible.prototype.destroy.call(this)
};
ApplicationModel.prototype = new IEventDispatcher();
ApplicationModel.prototype.constructor = ApplicationModel;

function ApplicationModel() {
    IEventDispatcher.call(this);
    var m = this;
    var g = false;
    var f = {};
    var i = {};
    var h = null;
    this.contentData = {
        href: null,
        html: null,
        changing: false
    };
    this.config = null;
    this.currentPage = null;
    this.currentPageContent = null;
    this.audioLoadPercent = 0;
    var c = false;
    m.lastPageIndex = -1;
    m.currentPageIndex = -1;
    m.pages = [];
    m.currentPageID = "";
    m.audioLoaded = false;
    m.soundsLoaded = true;
    m.imagesLoaded = false;
    this.initialize = function(n) {
        if (window.location.hash.length > 1) {
            n = window.location.hash.substr(1)
        }
        m.currentPage = n;
        $(window).bind("hashchange", l);
        k()
    };
    this.loadPage = function(n) {
        if (h && m.currentPage == n) {
            return
        }
        m.audioLoaded = false;
        m.audioLoadPercent = 0;
        m.imagesLoaded = false;
        m.currentPage = n;
        m.contentData.href = n;
        m.contentData.changing = true;
        m.lastPageIndex = m.currentPageIndex;
        m.currentPageIndex = m.pages.indexOf(n);
        if (h) {
            h.abort()
        }
        h = $.ajax({
            url: "pages/" + n,
            success: a,
            error: j
        })
    };
    this.loadPageIndex = function(o) {
        var n = m.pages[o];
        m.loadPage(n)
    };

    function k() {
        $.ajax({
            url: gv.config,
            success: e,
            error: j
        })
    }

    function e(n, o, p) {
        m.config = n;
        m.dispatchEvent(new ApplicationEvent("configurationLoaded", {
            config: n
        }));
        m.loadPage(m.currentPage)
    }

    function l() {
        var n = window.location.hash.length ? window.location.hash.substring(1) : null;
        if (n == m.currentPage || !n) {
            return
        }
        m.loadPage(n)
    }

    function b() {
        m.currentPage = GET.p ? GET.p : "home.html";
        $("#content").load("pages/" + m.currentPage + " #page", a)
    }

    function a(n, p, r) {
        var q = r.responseText.toString();
        q = q.replace(/\s+/gm, " ");
        /<title>(.*?)<\/title>/gm.test(q);
        document.title = RegExp.$1;
        h = null;
        window.location.hash = m.currentPage;
        m.contentClass = $(n).find("#page").attr("class");
        var o = d(n);
        m.contentData.html = o;
        m.currentPageID = $(n).find("#page").parent().attr("id");
        trace(m.currentPageID);
        if (!c) {
            m.dispatchEvent(new ApplicationEvent("loadComplete", {
                page: m.currentPage
            }))
        }
        m.dispatchEvent(new ApplicationEvent("pageChange", {
            page: m.currentPage
        }));
        c = true
    }

    function j(n, p, o) {
        h = null;
        trace("page load error", p)
    }

    function d(n) {
        return $(n).find("#page")
    }
};
ApplicationView.prototype = new IEventDispatcher();
ApplicationView.prototype.constructor = ApplicationView;

function ApplicationView() {
    IEventDispatcher.call(this);
    var o = this;
    var j = null;
    var l = new SequenceView();
    var c = 0;
    var k = 0;
    var n = 0;
    var m = "";
    this.initialize = function(r) {
        j = r;
        l.initialize(j);
        m = $("#loading-progress").html();
        g(0);
        j.addEventListener("pageChange", f);
        j.addEventListener("preloadComplete", d);
        j.addEventListener("audioLoadUpdate", i);
        j.addEventListener("pageUpdateInitiated", e)
    };

    function e(r) {
        g(0);
        $("p.loading-message-text").hide();
        $("#loading-progress").hide()
    }

    function f(s) {
        $("#page-wrapper").html(j.contentData.html);
        /.*?\-(\d+)/gim.test(j.currentPage);
        var t = RegExp.$1;
        $("p.loading-message-text").hide();
        $("#loading-progress").show();
        $("#loading-message-" + t).show();
        $("#loading-message").fadeIn();
        var r = $("img");
        c = r.length;
        k = 0;
        r.preload({
            onComplete: b,
            onFinish: q
        })
    }

    function b() {
        k++;
        g(h())
    }

    function q() {
        SiteController.imagesLoaded()
    }

    function d(r) {
        onDocumentReady();
        onWindowLoad();
        $("#loading-message").fadeOut();
        var s = $("#page").attr("class");
        if (!s) {
            s = ""
        }
        $("body").attr("class", s);
        $("#page").animate({
            opacity: 1
        }, "normal");
        $("a.skip-link").parent().click(p);
        $("#audio-control").click(a);
        if (SiteController.audioMuted) {
            $("#audio-control").addClass("muted")
        }
    }

    function a() {
        if ($("#audio-control").hasClass("muted")) {
            $("#audio-control").removeClass("muted");
            SiteController.unmuteAudio()
        } else {
            $("#audio-control").addClass("muted");
            SiteController.muteAudio()
        }
    }

    function h() {
        return Math.round(k * 75 / c) + j.audioLoadPercent
    }

    function i(r) {
        g(h())
    }

    function g(s) {
        var r = m.replace(/\$\{percentLoaded\}/gim, s);
        $("#loading-progress").html(r)
    }

    function p(r, s) {
        window.location.href = $(this).find("a").attr("href")
    }
};
ApplicationController.prototype = new IEventDispatcher();
ApplicationController.prototype.constructor = ApplicationController;

function ApplicationController() {
    IEventDispatcher.call(this);
    var j = this;
    var i = {
        page: null,
        div: null
    };
    var e = null;
    var a = 0;
    var f = null;
    var d = false;
    this.view = new ApplicationView();
    this.model = new ApplicationModel();
    this.audioPlayer = null;
    this.audioMuted = false;
    this.initialize = function() {
        j.view.initialize(j.model);
        j.model.initialize(gv.firstPage);
        g()
    };
    this.loadPage = function(l, k) {
        if (l == j.model.currentPage) {
            return
        }
        if (k && $(".next-page").hasClass("hidden")) {
            return
        }
        j.model.imagesLoaded = false;
        j.model.soundsLoaded = false;
        j.closeAudio();
        j.stopCurrentAudio();
        d = true;
        i.page = l;
        j.model.dispatchEvent(new ApplicationEvent("pageUpdateInitiated", {
            page: l
        }));
        $("#page").children().animate({
            opacity: 0
        }, "fast", h)
    };
    this.nextPage = function() {
        if (j.model.currentPageIndex < j.model.pages.length - 1) {
            j.model.loadPageIndex(j.model.currentPageIndex + 1)
        }
    };
    this.lastPage = function() {
        if (j.model.currentPageIndex > 0) {
            j.model.loadPageIndex(j.model.currentPageIndex - 1)
        }
        if (j.model.currentPageIndex == -1 && j.model.lastPageIndex != -1) {
            j.model.loadPageIndex(j.model.lastPageIndex)
        }
    };
    this.playAudio = function(k) {
        f = k;
        if (!j.audioPlayer || d) {
            return
        }
        j.audioPlayer.play(k);
        f = null
    };
    this.closeAudio = function() {
        if (!j.audioPlayer) {
            return
        }
        j.audioPlayer.close()
    };
    this.stopCurrentAudio = function() {
        if (!j.audioPlayer) {
            return
        }
        j.audioPlayer.stopCurrentSound()
    };
    this.muteAudio = function() {
        if (!j.audioPlayer) {
            return
        }
        j.audioPlayer.muteAudio();
        j.audioMuted = true
    };
    this.unmuteAudio = function() {
        if (!j.audioPlayer) {
            return
        }
        j.audioPlayer.unmuteAudio();
        j.audioMuted = false
    };
    this.loadAudioSequence = function() {
        e = arguments;
        a = e[0].length;
        if (!j.audioPlayer) {
            return
        }
        d = true;
        j.audioPlayer.loadSequence("SiteController.audioCompleteHandler", "SiteController.audioProgressHandler", arguments);
        e = null
    };
    this.audioProgressHandler = function(k) {
        j.model.audioLoadPercent = Math.round((a - parseInt(k)) * 25 / a);
        j.model.dispatchEvent(new ApplicationEvent("audioLoadUpdate"))
    };
    this.audioCompleteHandler = function(k) {
        d = false;
        j.soundsLoaded();
        trace("audio complete handler");
        if (f) {
            j.playAudio(f)
        }
    };
    this.imagesLoaded = function() {
        j.model.imagesLoaded = true;
        c()
    };
    this.soundsLoaded = function() {
        j.model.soundsLoaded = true;
        c()
    };

    function c() {
        if (j.model.imagesLoaded && j.model.soundsLoaded) {
            j.model.dispatchEvent(new ApplicationEvent("preloadComplete"))
        }
    }

    function g() {
        var k = new SWFObject("swf/AudioSequence.swf", "AudioSequence", 1, 1, "10.3", "#ffffff");
        k.addParam("allowScriptAccess", "always");
        k.addParam("swliveconnect", "true");
        k.addParam("allowFullScreen", "false");
        k.addParam("wmode", "transparent");
        k.addParam("scale", "noscale");
        k.write("audio-player")
    }

    function b(k) {
        if (navigator.appName.indexOf("Microsoft") != -1) {
            return window[k]
        }
        return document[k]
    }
    this.audioReady = function() {
        j.audioPlayer = b("AudioSequence");
        if (e) {
            j.loadAudioSequence.apply(this, e)
        }
    };

    function h() {
        j.model.loadPage(i.page)
    }
};

function ApplicationEvent(a, b) {
    this.type = a;
    this.target = null;
    this.data = b
};
SequenceView.prototype = new IEventDispatcher();
SequenceView.prototype.constructor = SequenceView;

function SequenceView() {
    IEventDispatcher.call(this);
    var s = this;
    var g = null;
    var z = null;
    var h = {};
    var A = {};
    var B = null;
    var m = null;
    var c = null;
    var b = null;
    var k = 0;
    var n = -0.1;
    this.initialize = function(C) {
        g = C;
        g.addEventListener("pageChange", f);
        g.addEventListener("configurationLoaded", a);
        g.addEventListener("prepareBehaviors", y);
        g.addEventListener("prepareBehaviors", x)
    };

    function f(C) {
        B = g.currentPageID;
        e()
    }

    function e() {
        if (!B || !A[B]) {
            return
        }
        SiteController.loadAudioSequence(A[B])
    }
    var p = 0;

    function u() {
        var C = h[B];
        if (!C) {
            return
        }
        p++;
        for (var F = 0, I = C.length; F < I; F++) {
            var H = C[F];
            if (H.type != "animation") {
                continue
            }
            $(H.selector).stop(true, true).animate(H.defaultProps, 0);
            if (H.mask) {
                var E = $(H.selector);
                var G = $(H.selector).parent();
                if ($(G).hasClass("mask")) {
                    continue
                }
                $(H.selector).remove();
                var D = $('<div class="mask"> </div>');
                $(D).append($(E));
                if (H.maskIndex) {
                    $($(G).children()[H.maskIndex]).after($(D).outerHTML())
                } else {
                    $(G).prepend($(D).outerHTML())
                }
            }
        }
    }

    function x(C) {
        i();
        if (!B || !h[B]) {
            return
        }
        var D = A[B];
        D = $.grep(D, function(F, E) {
            if (F.panel === C.data.panel) {
                return true
            }
            return false
        });
        SiteController.playAudio(D)
    }

    function y(D) {
        r();
        u();
        if (!B || !h[B]) {
            return
        }
        var C = h[B];
        if (C) {
            C = $.grep(C, function(I, H) {
                if (I.panel === D.data.panel) {
                    return true
                }
                return false
            })
        }
        b = [];
        for (var E = 0, G = C.length; E < G; E++) {
            var F = C[E];
            switch (F.type) {
                case "animation":
                    w(F);
                    break;
                case "animated-png":
                    o(F);
                    break;
                default:
            }
        }
        m = C
    }

    function w(C) {
        $(C.selector).stop(true, true).delay(C.time).animate(C.props, {
            duration: C.duration,
            easing: C.ease
        })
    }

    function j(C) {
        $(C.selector).stop(true, true).animate(C.defaultProps, C.duration)
    }

    function o(C) {
        clearInterval(k);
        b.push(C);
        k = setInterval(v, 100)
    }

    function v() {
        n += 0.1;
        for (var D = 0, F = b.length; D < F; D++) {
            var E = b[D];
            if (E.complete) {
                continue
            }
            E.ticker = n - E.currentTime;
            var H = E.frames.length;
            for (var C = H - 1; C >= 0; C--) {
                var G = E.frames[C];
                if (G.timeIn <= E.ticker) {
                    $(E.selector).hide();
                    $($(E.selector)[C]).show();
                    if (C == H - 1 && !E.loop) {
                        E.complete = true
                    } else {
                        if (C == H - 1 && E.loop) {
                            E.currentTime = n - 0.1
                        }
                    }
                    break
                }
            }
        }
    }

    function r() {
        if (!m) {
            return
        }
        b = [];
        clearInterval(k);
        n = -0.1;
        for (var C = 0, E = m.length; C < E; C++) {
            var D = m[C];
            D.ticker = 0;
            D.currentTime = D.time;
            D.complete = false;
            switch (D.type) {
                case "animation":
                    j(D);
                    break;
                default:
            }
        }
        m = null
    }

    function i() {
        SiteController.stopCurrentAudio()
    }

    function a(C) {
        h = {};
        A = {};
        $(C.data.config).find("sequence").each(l)
    }

    function l(C) {
        h[$(this).attr("id")] = [];
        A[$(this).attr("id")] = [];
        $(this).find("behavior").each(q);
        $(this).find("audio").each(d)
    }

    function d(D) {
        var E = $(this).parent().attr("id");
        var C = {
            sequence: E,
            panel: "",
            url: "",
            volume: 1,
            delay: 0,
            pan: 0
        };
        C.panel = t($(this).attr("panel"));
        C.url = $(this).attr("src");
        C.volume = t($(this).attr("volume"));
        C.delay = t($(this).attr("delay"));
        C.pan = t($(this).attr("pan"));
        C.fadeOut = t($(this).attr("fadeOut"));
        C.loops = t($(this).attr("loops"));
        A[E].push(C)
    }

    function q(C) {
        var E = $(this).parent().attr("id");
        var D = {
            sequence: E,
            panel: "",
            selector: "",
            time: 0,
            type: "animation",
            duration: "normal",
            props: {},
            frames: [],
            target: null,
            defaultProps: {}
        };
        D.panel = t($(this).attr("panel"));
        D.selector = $(this).attr("selector");
        D.time = t($(this).attr("time"));
        D.currentTime = D.time;
        D.type = $(this).attr("type");
        D.mask = t($(this).attr("mask"));
        D.maskIndex = t($(this).attr("maskIndex"));
        D.duration = t($(this).attr("duration"));
        D.ease = $(this).attr("ease");
        D.loop = t($(this).attr("loop"));
        D.ticker = 0;
        if (!isNaN(D.duration)) {
            D.duration *= 1000
        }
        if (D.type == "animation") {
            D.time *= 1000
        }
        $(this).find("prop").each(function() {
            D.props[$(this).attr("name")] = t($(this).attr("end"));
            D.defaultProps[$(this).attr("name")] = t($(this).attr("start"))
        });
        $(this).find("frame").each(function() {
            var F = {
                index: t($(this).attr("index")) - 1,
                timeIn: t($(this).attr("timeIn"))
            };
            D.frames.push(F)
        });
        h[E].push(D)
    }

    function t(C) {
        if (!isNaN(parseFloat(C))) {
            return parseFloat(C)
        }
        if (C == "true") {
            return true
        }
        if (C == "false") {
            return false
        }
        return C
    }
};
var parallaxContainer = "#theAll";
window.scrollSwing = 550;

function panelEvSniffer() {
    var a = $(window).scrollLeft();
    var b = $("#layerA").find(".p").length;
    if (a >= -353 && a < 353 && p.panelHovered != 1) {
        p.panelHovered = 1;
        p.panelNarr("#c_1");
        SiteController.model.dispatchEvent(new ApplicationEvent("prepareBehaviors", {
            panel: 1
        }));
        if ($("#page").hasClass("last")) {
            $(".skip-link").show();
            $(".enter-link").hide()
        }
    } else {
        if (a >= 353 && a < 1059 && p.panelHovered != 2) {
            p.panelHovered = 2;
            p.panelNarr("#c_2");
            SiteController.model.dispatchEvent(new ApplicationEvent("prepareBehaviors", {
                panel: 2
            }));
            if ($("#page").hasClass("last")) {
                $(".skip-link").show();
                $(".enter-link").hide()
            }
        } else {
            if (a >= 1059 && a < 1765 && p.panelHovered != 3) {
                p.panelHovered = 3;
                p.panelNarr("#c_3");
                SiteController.model.dispatchEvent(new ApplicationEvent("prepareBehaviors", {
                    panel: 3
                }));
                if ($("#page").hasClass("last")) {
                    $(".skip-link").hide();
                    $(".enter-link").show()
                }
            } else {
                if (a >= 1765 && a < 2471 && p.panelHovered != 4) {
                    p.panelHovered = 4;
                    p.panelNarr("#c_4");
                    SiteController.model.dispatchEvent(new ApplicationEvent("prepareBehaviors", {
                        panel: 4
                    }))
                } else {
                    if (a >= 2471 && a < 3177 && p.panelHovered != 5) {
                        p.panelHovered = 5;
                        p.panelNarr("#c_5");
                        SiteController.model.dispatchEvent(new ApplicationEvent("prepareBehaviors", {
                            panel: 5
                        }))
                    } else {
                        if (a >= 3177 && a < 3883 && p.panelHovered != 6) {
                            p.panelHovered = 6;
                            p.panelNarr("#c_6");
                            SiteController.model.dispatchEvent(new ApplicationEvent("prepareBehaviors", {
                                panel: 6
                            }))
                        }
                    }
                }
            }
        }
    }
    if (p.panelHovered === b) {
        $(".next-page").removeClass("hidden")
    } else {
        $(".next-page").addClass("hidden")
    }
};
var SiteController;
var GET = getURLVariables();
var gv = {
    firstPage: "sequence-1.html",
    config: "xml/config.xml",
    audio: null
};
$(document).ready(init);

function init() {
    SiteController = new ApplicationController();
    SiteController.initialize()
}

function getURLVariables() {
    var b = {};
    var a = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(c, d, e) {
        b[d] = e
    });
    return b
}

function trace() {
    var c = arguments.length;
    for (var b = 0; b < c; b++) {
        try {
            console.log(arguments[b])
        } catch (a) {}
    }
}
jQuery.fn.exists = function() {
    return this.length > 0
};
jQuery.fn.shuffle = function() {
    return this.each(function() {
        var a = $(this).children();
        return (a.length) ? $(this).html($.shuffle(a)) : this
    })
};
$.shuffle = function(b) {
    for (var c, a, d = b.length; d; c = parseInt(Math.random() * d), a = b[--d], b[d] = b[c], b[c] = a) {}
    return b
};
jQuery.fn.outerHTML = function(a) {
    return (a) ? this.before(a).remove() : jQuery("<p>").append(this.eq(0).clone()).html()
};
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(b) {
        var a = this.length >>> 0;
        var c = Number(arguments[1]) || 0;
        c = (c < 0) ? Math.ceil(c) : Math.floor(c);
        if (c < 0) {
            c += a
        }
        for (; c < a; c++) {
            if (c in this && this[c] === b) {
                return c
            }
        }
        return -1
    }
};
